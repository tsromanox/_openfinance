apiVersion: apps/v1
kind: Deployment
metadata:
  name: openfinance-accounts-service
  namespace: openfinance
  labels:
    app: accounts-service
    version: v1
spec:
  replicas: 10
  selector:
    matchLabels:
      app: accounts-service
  template:
    metadata:
      labels:
        app: accounts-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
        - name: accounts-service
          image: openfinance/accounts-service:1.0.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: JAVA_OPTS
              value: >-
                -XX:+UseZGC
                -XX:+ZGenerational
                -Xms2g
                -Xmx4g
                --enable-preview
                -Djava.util.concurrent.ForkJoinPool.common.parallelism=200
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: COSMOS_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: cosmos-credentials
                  key: endpoint
            - name: COSMOS_KEY
              valueFrom:
                secretKeyRef:
                  name: cosmos-credentials
                  key: key
            - name: REDIS_HOST
              value: "redis-cluster.openfinance.svc.cluster.local"
            - name: KAFKA_BROKERS
              value: "kafka-cluster-kafka-bootstrap.openfinance.svc.cluster.local:9092"
            - name: OAUTH2_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: oauth2-credentials
                  key: client-id
            - name: OAUTH2_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: oauth2-credentials
                  key: client-secret
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: accounts-service
  namespace: openfinance
  labels:
    app: accounts-service
spec:
  selector:
    app: accounts-service
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: accounts-service-hpa
  namespace: openfinance
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: openfinance-accounts-service
  minReplicas: 10
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - type: Pods
      pods:
        metric:
          name: kafka_consumer_lag_sum
        target:
          type: AverageValue
          averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 10
          periodSeconds: 60
      selectPolicy: Max