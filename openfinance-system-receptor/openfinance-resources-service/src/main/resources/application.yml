spring:
  application:
    name: openfinance-resources-service

  threads:
    virtual:
      enabled: true  # Enable virtual threads

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/openfinance}
    username: ${DB_USERNAME:openfinance_user}
    password: ${DB_PASSWORD:openfinance_pass}
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:200}  # Increased for virtual threads
      minimum-idle: 30
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
        generate_statistics: false
    show-sql: false

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: resources-service
      auto-offset-reset: earliest
      max-poll-records: 500
    producer:
      batch-size: 16384
      buffer-memory: 33554432

  cache:
    type: redis
    redis:
      time-to-live: 900000  # 15 minutes

server:
  port: ${SERVER_PORT:8082}
  tomcat:
    threads:
      max: 200  # Will be virtual threads
      min-spare: 10
    accept-count: 100
    max-connections: 10000
  servlet:
    context-path: /

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,threaddump,beans,conditions
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[batch_processing_duration]": true
        "[resource_sync_duration]": true

openfinance:
  resources:
    virtual-threads:
      enabled: ${VIRTUAL_THREADS_ENABLED:true}
    batch:
      size: ${BATCH_SIZE:1000}
      virtual-threads:
        max: ${MAX_VIRTUAL_THREADS:10000}  # Max concurrent virtual threads
      timeout-minutes: ${BATCH_TIMEOUT:120}
      schedule:
        morning: "0 0 6 * * *"   # 6:00 AM daily
        evening: "0 0 18 * * *"  # 6:00 PM daily
    sync:
      interval: ${SYNC_INTERVAL:900000}  # 15 minutes
      timeout: ${SYNC_TIMEOUT:30000}     # 30 seconds
    scheduler:
      enabled: ${SCHEDULER_ENABLED:true}
    http:
      connection:
        pool:
          max: ${HTTP_POOL_MAX:200}
        timeout: ${HTTP_TIMEOUT:30000}
      read:
        timeout: ${HTTP_READ_TIMEOUT:60000}
  transmitter:
    base-url: ${TRANSMITTER_BASE_URL:https://api.transmitter.com}
    timeout: ${TRANSMITTER_TIMEOUT:30000}

logging:
  level:
    root: INFO
    br.com.openfinance.resources: DEBUG
    java.lang.VirtualThread: DEBUG  # Virtual threads logging
    org.springframework.web: INFO
    org.springframework.data: INFO
    org.hibernate: WARN
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

---
# Local development profile
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://localhost:5432/openfinance
    username: openfinance_user
    password: openfinance_pass
  kafka:
    bootstrap-servers: localhost:9092
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 2000ms

logging:
  level:
    br.com.openfinance.resources: DEBUG

---
# Docker profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/openfinance
    username: openfinance_user
    password: openfinance_pass
  kafka:
    bootstrap-servers: kafka:29092
  data:
    redis:
      host: redis
      port: 6379

server:
  port: 8082

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

openfinance:
  resources:
    batch:
      virtual-threads:
        max: 20000  # Higher for production
    http:
      connection:
        pool:
          max: 500  # Higher for production

logging:
  level:
    root: WARN
    br.com.openfinance.resources: INFO
    java.lang.VirtualThread: INFO