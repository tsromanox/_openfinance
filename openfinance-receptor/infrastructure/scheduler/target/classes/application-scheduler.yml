# Advanced Scheduler Configuration - Optimized for Virtual Threads and high-performance processing

# OpenFinance Scheduler Configuration
openfinance:
  scheduler:
    # Core scheduler settings
    enabled: true
    startup-delay: 10000  # 10 seconds
    backup:
      interval: 60000     # 1 minute backup trigger
    
    # Virtual Threads configuration
    virtual-threads:
      enabled: true
      max-pool-size: 1000
      connection-timeout: 10s
      validation-timeout: 2s
    
    # Batch processing settings
    batch:
      size: 100
      max-concurrent: 50
      parallel-factor: 10
      fetch-size: 50
      timeout:
        task: 30s
        batch: 300s       # 5 minutes
    
    # Retry configuration
    retry:
      max-attempts: 3
      backoff-delay: 5s
      max-backoff-delay: 60s
    
    # Adaptive resource management
    adaptive:
      enabled: true
      batch-size:
        min: 10
        max: 500
      concurrency:
        min: 5
        max: 200
      memory-threshold: 0.85    # 85% memory usage threshold
      cpu-threshold: 0.80       # 80% CPU usage threshold
      interval:
        min: 5000    # 5 seconds
        max: 60000   # 1 minute
    
    # Performance monitoring
    monitoring:
      enabled: true
      metrics-interval: 30s
      performance-log-interval: 300s  # 5 minutes
      slow-processing-threshold: 1000ms
    
    # Circuit breaker configuration
    circuit-breaker:
      failure-rate-threshold: 50
      minimum-number-of-calls: 10
      sliding-window-size: 20
      wait-duration-in-open-state: 60s

# Spring configuration
spring:
  # Task execution configuration
  task:
    execution:
      pool:
        core-size: 10
        max-size: 200
        queue-capacity: 500
        keep-alive: 60s
      thread-name-prefix: "scheduler-"
    scheduling:
      pool:
        size: 10
        thread-name-prefix: "scheduler-task-"
  
  # Async configuration
  async:
    core-pool-size: 10
    max-pool-size: 200
    queue-capacity: 500
    thread-name-prefix: "async-scheduler-"

# Quartz Scheduler Configuration
quartz:
  job-store-type: memory
  properties:
    org.quartz.scheduler.instanceName: OpenFinanceVirtualThreadScheduler
    org.quartz.scheduler.instanceId: AUTO
    org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
    org.quartz.threadPool.threadCount: 10
    org.quartz.threadPool.threadPriority: 5
    org.quartz.jobStore.misfireThreshold: 60000
    org.quartz.scheduler.skipUpdateCheck: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      scheduler-processing:
        failure-rate-threshold: 50
        minimum-number-of-calls: 10
        sliding-window-size: 20
        wait-duration-in-open-state: 60s
        permitted-number-of-calls-in-half-open-state: 5
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.lang.Exception
  
  retry:
    instances:
      scheduler-processing:
        max-attempts: 3
        wait-duration: 5s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.lang.RuntimeException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
  
  ratelimiter:
    instances:
      scheduler-processing:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 10s

# Actuator configuration for monitoring
management:
  endpoints:
    web:
      exposure:
        include: "health,metrics,prometheus,scheduledtasks,quartz"
  metrics:
    tags:
      application: openfinance-receptor
      component: infrastructure-scheduler
    export:
      prometheus:
        enabled: true
    enable:
      jvm: true
      system: true
      process: true
    web:
      server:
        auto-time-requests: true
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    circuitbreakers:
      enabled: true

# Logging configuration
logging:
  level:
    br.com.openfinance.infrastructure.scheduler: INFO
    org.quartz: WARN
    org.springframework.scheduling: DEBUG
    io.github.resilience4j: DEBUG
    # Virtual Thread debugging (enable only for development)
    java.util.concurrent: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{correlation-id}] [%X{batch-id}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlation-id}] [%X{batch-id}] %logger{36} - %msg%n"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: "development"

openfinance:
  scheduler:
    batch:
      size: 20
      max-concurrent: 10
    adaptive:
      memory-threshold: 0.70
      cpu-threshold: 0.60
    monitoring:
      performance-log-interval: 60s  # More frequent logging in dev

logging:
  level:
    br.com.openfinance.infrastructure.scheduler: DEBUG
    org.springframework.scheduling: DEBUG
    java.util.concurrent: INFO

---
# Production Profile
spring:
  config:
    activate:
      on-profile: "production"

openfinance:
  scheduler:
    batch:
      size: 200
      max-concurrent: 100
    adaptive:
      memory-threshold: 0.90
      cpu-threshold: 0.85
    monitoring:
      performance-log-interval: 600s  # Less frequent logging in production

logging:
  level:
    br.com.openfinance.infrastructure.scheduler: WARN
    org.springframework.scheduling: WARN
    java.util.concurrent: ERROR

---
# Test Profile
spring:
  config:
    activate:
      on-profile: "test"

openfinance:
  scheduler:
    enabled: false  # Disable scheduler in tests
    virtual-threads:
      enabled: true
      max-pool-size: 10
    batch:
      size: 5
      max-concurrent: 2

logging:
  level:
    br.com.openfinance.infrastructure.scheduler: DEBUG