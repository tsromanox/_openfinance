/*
 * API Consents - Open Finance Brasil
 * API de consentimentos para o Open Finance Brasil
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: contato@openfinance.org.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openfinance.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Document
 */
@JsonPropertyOrder({
  Document.JSON_PROPERTY_IDENTIFICATION,
  Document.JSON_PROPERTY_REL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-12T15:58:57.215261-03:00[America/Sao_Paulo]", comments = "Generator version: 7.14.0")
public class Document {
  public static final String JSON_PROPERTY_IDENTIFICATION = "identification";
  @jakarta.annotation.Nonnull
  private String identification;

  /**
   * Tipo de documento
   */
  public enum RelEnum {
    CPF(String.valueOf("CPF")),
    
    CNPJ(String.valueOf("CNPJ"));

    private String value;

    RelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RelEnum fromValue(String value) {
      for (RelEnum b : RelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REL = "rel";
  @jakarta.annotation.Nonnull
  private RelEnum rel;

  public Document() {
  }

  public Document identification(@jakarta.annotation.Nonnull String identification) {
    
    this.identification = identification;
    return this;
  }

  /**
   * CPF ou CNPJ do usu√°rio
   * @return identification
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentification() {
    return identification;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentification(@jakarta.annotation.Nonnull String identification) {
    this.identification = identification;
  }

  public Document rel(@jakarta.annotation.Nonnull RelEnum rel) {
    
    this.rel = rel;
    return this;
  }

  /**
   * Tipo de documento
   * @return rel
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RelEnum getRel() {
    return rel;
  }


  @JsonProperty(JSON_PROPERTY_REL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRel(@jakarta.annotation.Nonnull RelEnum rel) {
    this.rel = rel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.identification, document.identification) &&
        Objects.equals(this.rel, document.rel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identification, rel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

