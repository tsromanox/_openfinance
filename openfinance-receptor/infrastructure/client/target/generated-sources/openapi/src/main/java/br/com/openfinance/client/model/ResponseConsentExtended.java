/*
 * API Consents - Open Finance Brasil
 * API de consentimentos para o Open Finance Brasil
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: contato@openfinance.org.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openfinance.client.model;

import java.util.Objects;
import java.util.Arrays;
import br.com.openfinance.client.model.ConsentExtendedData;
import br.com.openfinance.client.model.Links;
import br.com.openfinance.client.model.Meta;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ResponseConsentExtended
 */
@JsonPropertyOrder({
  ResponseConsentExtended.JSON_PROPERTY_DATA,
  ResponseConsentExtended.JSON_PROPERTY_LINKS,
  ResponseConsentExtended.JSON_PROPERTY_META
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-12T15:58:57.215261-03:00[America/Sao_Paulo]", comments = "Generator version: 7.14.0")
public class ResponseConsentExtended {
  public static final String JSON_PROPERTY_DATA = "data";
  @jakarta.annotation.Nonnull
  private ConsentExtendedData data;

  public static final String JSON_PROPERTY_LINKS = "links";
  @jakarta.annotation.Nonnull
  private Links links;

  public static final String JSON_PROPERTY_META = "meta";
  @jakarta.annotation.Nonnull
  private Meta meta;

  public ResponseConsentExtended() {
  }

  public ResponseConsentExtended data(@jakarta.annotation.Nonnull ConsentExtendedData data) {
    
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConsentExtendedData getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(@jakarta.annotation.Nonnull ConsentExtendedData data) {
    this.data = data;
  }

  public ResponseConsentExtended links(@jakarta.annotation.Nonnull Links links) {
    
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Links getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLinks(@jakarta.annotation.Nonnull Links links) {
    this.links = links;
  }

  public ResponseConsentExtended meta(@jakarta.annotation.Nonnull Meta meta) {
    
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_META)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Meta getMeta() {
    return meta;
  }


  @JsonProperty(JSON_PROPERTY_META)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMeta(@jakarta.annotation.Nonnull Meta meta) {
    this.meta = meta;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseConsentExtended responseConsentExtended = (ResponseConsentExtended) o;
    return Objects.equals(this.data, responseConsentExtended.data) &&
        Objects.equals(this.links, responseConsentExtended.links) &&
        Objects.equals(this.meta, responseConsentExtended.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, links, meta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseConsentExtended {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

