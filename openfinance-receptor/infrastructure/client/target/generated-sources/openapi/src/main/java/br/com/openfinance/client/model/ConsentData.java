/*
 * API Consents - Open Finance Brasil
 * API de consentimentos para o Open Finance Brasil
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: contato@openfinance.org.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openfinance.client.model;

import java.util.Objects;
import java.util.Arrays;
import br.com.openfinance.client.model.BusinessEntity;
import br.com.openfinance.client.model.EnumConsentPermissions;
import br.com.openfinance.client.model.LoggedUser;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConsentData
 */
@JsonPropertyOrder({
  ConsentData.JSON_PROPERTY_LOGGED_USER,
  ConsentData.JSON_PROPERTY_BUSINESS_ENTITY,
  ConsentData.JSON_PROPERTY_PERMISSIONS,
  ConsentData.JSON_PROPERTY_EXPIRATION_DATE_TIME,
  ConsentData.JSON_PROPERTY_TRANSACTION_FROM_DATE_TIME,
  ConsentData.JSON_PROPERTY_TRANSACTION_TO_DATE_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-12T15:58:57.215261-03:00[America/Sao_Paulo]", comments = "Generator version: 7.14.0")
public class ConsentData {
  public static final String JSON_PROPERTY_LOGGED_USER = "loggedUser";
  @jakarta.annotation.Nonnull
  private LoggedUser loggedUser;

  public static final String JSON_PROPERTY_BUSINESS_ENTITY = "businessEntity";
  @jakarta.annotation.Nonnull
  private BusinessEntity businessEntity;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  @jakarta.annotation.Nonnull
  private List<EnumConsentPermissions> permissions = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPIRATION_DATE_TIME = "expirationDateTime";
  @jakarta.annotation.Nonnull
  private OffsetDateTime expirationDateTime;

  public static final String JSON_PROPERTY_TRANSACTION_FROM_DATE_TIME = "transactionFromDateTime";
  @jakarta.annotation.Nullable
  private OffsetDateTime transactionFromDateTime;

  public static final String JSON_PROPERTY_TRANSACTION_TO_DATE_TIME = "transactionToDateTime";
  @jakarta.annotation.Nullable
  private OffsetDateTime transactionToDateTime;

  public ConsentData() {
  }

  public ConsentData loggedUser(@jakarta.annotation.Nonnull LoggedUser loggedUser) {
    
    this.loggedUser = loggedUser;
    return this;
  }

  /**
   * Get loggedUser
   * @return loggedUser
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGGED_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LoggedUser getLoggedUser() {
    return loggedUser;
  }


  @JsonProperty(JSON_PROPERTY_LOGGED_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLoggedUser(@jakarta.annotation.Nonnull LoggedUser loggedUser) {
    this.loggedUser = loggedUser;
  }

  public ConsentData businessEntity(@jakarta.annotation.Nonnull BusinessEntity businessEntity) {
    
    this.businessEntity = businessEntity;
    return this;
  }

  /**
   * Get businessEntity
   * @return businessEntity
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUSINESS_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BusinessEntity getBusinessEntity() {
    return businessEntity;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBusinessEntity(@jakarta.annotation.Nonnull BusinessEntity businessEntity) {
    this.businessEntity = businessEntity;
  }

  public ConsentData permissions(@jakarta.annotation.Nonnull List<EnumConsentPermissions> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public ConsentData addPermissionsItem(EnumConsentPermissions permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<EnumConsentPermissions> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPermissions(@jakarta.annotation.Nonnull List<EnumConsentPermissions> permissions) {
    this.permissions = permissions;
  }

  public ConsentData expirationDateTime(@jakarta.annotation.Nonnull OffsetDateTime expirationDateTime) {
    
    this.expirationDateTime = expirationDateTime;
    return this;
  }

  /**
   * Data e hora de expiração do consentimento
   * @return expirationDateTime
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpirationDateTime() {
    return expirationDateTime;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpirationDateTime(@jakarta.annotation.Nonnull OffsetDateTime expirationDateTime) {
    this.expirationDateTime = expirationDateTime;
  }

  public ConsentData transactionFromDateTime(@jakarta.annotation.Nullable OffsetDateTime transactionFromDateTime) {
    
    this.transactionFromDateTime = transactionFromDateTime;
    return this;
  }

  /**
   * Data e hora de início para consulta de transações
   * @return transactionFromDateTime
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_FROM_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTransactionFromDateTime() {
    return transactionFromDateTime;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_FROM_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionFromDateTime(@jakarta.annotation.Nullable OffsetDateTime transactionFromDateTime) {
    this.transactionFromDateTime = transactionFromDateTime;
  }

  public ConsentData transactionToDateTime(@jakarta.annotation.Nullable OffsetDateTime transactionToDateTime) {
    
    this.transactionToDateTime = transactionToDateTime;
    return this;
  }

  /**
   * Data e hora de fim para consulta de transações
   * @return transactionToDateTime
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TO_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTransactionToDateTime() {
    return transactionToDateTime;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TO_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionToDateTime(@jakarta.annotation.Nullable OffsetDateTime transactionToDateTime) {
    this.transactionToDateTime = transactionToDateTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentData consentData = (ConsentData) o;
    return Objects.equals(this.loggedUser, consentData.loggedUser) &&
        Objects.equals(this.businessEntity, consentData.businessEntity) &&
        Objects.equals(this.permissions, consentData.permissions) &&
        Objects.equals(this.expirationDateTime, consentData.expirationDateTime) &&
        Objects.equals(this.transactionFromDateTime, consentData.transactionFromDateTime) &&
        Objects.equals(this.transactionToDateTime, consentData.transactionToDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loggedUser, businessEntity, permissions, expirationDateTime, transactionFromDateTime, transactionToDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentData {\n");
    sb.append("    loggedUser: ").append(toIndentedString(loggedUser)).append("\n");
    sb.append("    businessEntity: ").append(toIndentedString(businessEntity)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    expirationDateTime: ").append(toIndentedString(expirationDateTime)).append("\n");
    sb.append("    transactionFromDateTime: ").append(toIndentedString(transactionFromDateTime)).append("\n");
    sb.append("    transactionToDateTime: ").append(toIndentedString(transactionToDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

